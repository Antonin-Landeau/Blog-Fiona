import { GetStaticProps } from "next";
import Head from "next/head";
import Image from "next/image";
import { ParsedUrlQuery } from "querystring";
import React, { useState } from "react";
import Header from "../../components/Header";
import { sanityClient, urlFor } from "../../sanity";
import { IPost, IRecepies } from "../../types";

interface Props {
  recepie: IRecepies;
}

interface IParams extends ParsedUrlQuery {
  slug: string;
}

export const Post = ({ recepie }: Props) => {
  const [nbPerson, setNbPerson] = useState<number>(2);
  // console.log(recepie.mainImage.asset._ref.split('image-')[1])
  console.log(urlFor(recepie.mainImage).url());

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className="my-16">
        <article>
          <section
            style={{
              backgroundImage:
                "linear-gradient(rgba(0,0,0,0.7),rgba(0,0,0,0)), url(" +
                urlFor(recepie.mainImage).url() +
                ")",
            }}
            className={`relative h-52 bg-cover`}
          >
            <h1 className="absolute text-2xl font-bold text-white bg-primary-color p-3 right-0 bottom-9 rounded-l-lg">
              {recepie.title}
            </h1>
          </section>
          <section className="px-5 mx-auto">
            <h2 className="text-center p-2">
              <span className="font-semibold text-gray-800">Temps total: </span>
              {recepie?.duration.totalTime} min
            </h2>
            <div className="flex justify-around">
              <div>
                <h2 className="font-semibold text-gray-800">Pr√©paration</h2>
                <p className="text-center">
                  {recepie.duration.preparationTime
                    ? `${recepie.duration.preparationTime} min`
                    : "-"}
                </p>
              </div>
              <div>
                <h2 className="font-semibold text-gray-800">Repos</h2>
                <p className="text-center">
                  {recepie?.duration.restTime
                    ? `${recepie?.duration.restTime} min`
                    : "-"}
                </p>
              </div>
              <div>
                <h2 className="font-semibold text-gray-800">Cuisson</h2>
                <p className="text-center">
                  {recepie?.duration.cookTime
                    ? `${recepie?.duration.cookTime} min`
                    : "-"}
                </p>
              </div>
            </div>
          </section>
          <section className="px-5">
            <h2 className="text-center p-2 font-semibold text-gray-800">
              Vous cuisinez pour ?
            </h2>
            <div className="flex justify-center">
              <div className=" bg-primary-color rounded-full w-7 h-7 flex justify-center items-center text-white text-2xl leading-none"
                onClick={() => {
                  if (nbPerson > 1) {
                    setNbPerson((prev) => prev - 1);
                  }
                }}
              >
                -
              </div>
              {nbPerson === 1 && (
                <p className="mx-5">{nbPerson} personne</p>
              )}
              {nbPerson > 1 && (
                <p className="mx-5">{nbPerson} personnes</p>
              )}
            
              <button className=" bg-primary-color rounded-full w-7 h-7 flex justify-center items-center text-white text-2xl leading-none"
                onClick={() => {
                  if (nbPerson < 20) {
                    setNbPerson((prev) => prev + 1);
                  }
                }}
              >
                +
              </button>
            </div>
          </section>
          <section className="px-5">
            <h2 className="text-center p-2 font-semibold text-gray-800">
              Ingredients
            </h2>
            <ul className="">
              {recepie.ingredients.map((ingredient, index) => (
                <li className="list-inside" key={index}>
                  {" "}
                  {ingredient.quantity * nbPerson} {ingredient.unit}{" "}
                  {ingredient.title}
                </li>
              ))}
            </ul>
          </section>
          <div></div>
        </article>
      </main>
    </div>
  );
};

export default Post;

export const getStaticPaths = async () => {
  const query = `
  *[_type == 'recepies']{
    _createdAt,
    _id,
    _type,
    duration,
    ingredients,
    mainImage,
    title,
    type,
    slug
  }
  `;

  const recepies = await sanityClient.fetch(query);

  const paths: any = [];

  recepies.forEach((recepie: IRecepies) => {
    paths.push({ params: { slug: recepie.slug.current } });
  });

  return {
    paths: paths,
    fallback: false,
  };
};

export const getStaticProps: GetStaticProps = async (context) => {
  const { slug } = context.params as IParams;

  const query = `*[_type == 'recepies' && slug.current == $slug][0]{
    _createdAt,
    _id,
    _type,
    duration,
    ingredients,
    mainImage,
    title,
    type,
    slug
  }`;

  const recepie = await sanityClient.fetch(query, { slug: slug });

  if (!recepie) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      recepie,
    },
  };
};
