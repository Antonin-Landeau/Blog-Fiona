import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  ChangeEvent,
  ReactNode,
  SetStateAction,
  useEffect,
  useState,
} from "react";
import { Card } from "../../components/Card";

import Header from "../../components/Header";
import SearchInput from "../../components/SearchInput";
import { sanityClient, urlFor } from "../../sanity";
import { IPost, IRecepiesFilter, IPostFilter } from "../../types";
import Loader from "../../public/loader.svg";
import TypesSelector from "../../components/TypesSelector";
import Footer from "../../components/Footer/Footer";

interface Props {
  posts: [IPost];
}

const Recettes = () => {
  const [recepies, setRecepies] = useState([]);
  const [filters, setFilters] = useState<IPostFilter>({
    search: "",
    orderBy: "desc",
  });

  const [page, setPage] = useState(1);
  const [pages, setpages] = useState<number>();
  const [recepiesCount, setRecepiesCount] = useState<number>();
  const [itemPerPage, setItemPerPage] = useState(9);

  const [types, setTypes] = useState<string[]>(["Entrée", "Plat", "Dessert"]);

  const [loading, setLoading] = useState<boolean>(true);

  const getRecepies = async (
    { search, orderBy }: IPostFilter,
    type: string[],
    page: number,
    itemPerPage: number
  ) => {
    setLoading(true);
    const query = `*[_type == 'recepies' && type -> title in ${JSON.stringify(
      type
    )} && title match "${search}*"][${page * itemPerPage - itemPerPage}...${
      page * itemPerPage
    }] {
      _createdAt,
      _id,
      duration,
      ingredients,
      mainImage,
      title,
      slug,
      "type": type -> title
    }| order(_createdAt ${orderBy})`;
    const recepiesCountQuery = `count(*[_type == 'recepies'&& type -> title in ${JSON.stringify(
      type
    )}  && title match "${search}*"])`;

    const recepies = await sanityClient.fetch(query);
    const recepiesCount = await sanityClient.fetch(recepiesCountQuery);
    setRecepiesCount(recepiesCount);
    setpages(Math.ceil(recepiesCount / itemPerPage));
    setRecepies(recepies);
    setLoading(false);
  };

  useEffect(() => {
    setPage(1);
    getRecepies(filters, types, page, itemPerPage);
  }, [filters, types]);

  useEffect(() => {
    getRecepies(filters, types, page, itemPerPage);
  }, [page]);

  return (
    <div>
      <Head>
        <title>Toutes mes recettes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />

      <main className="mx-auto mt-16 mb-16">
        <>
          <h1 className="text-3xl font-bold text-center py-7">Recettes</h1>
          <section className="mx-auto max-w-sm px-5">
            <SearchInput
              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                setFilters((prev) => ({ ...prev, search: e.target.value }))
              }
              placeholder="Recherche ..."
            />
            <TypesSelector setFilters={setTypes} filters={types} />
            <div className="flex items-center mb-3 justify-between px-1">
              {recepiesCount && recepiesCount > 1 && (
                <p className="text-gray-500">{recepiesCount} resultats</p>
              )}
              {recepiesCount == 1 && (
                <p className="text-gray-500">{recepiesCount} resultat</p>
              )}
              <select
                onChange={(e: ChangeEvent<HTMLSelectElement>) =>
                  setFilters((prev) => ({ ...prev, orderBy: e.target.value }))
                }
                name="pets"
                id="pet-select"
                className="p-1 border text-white bg-primary-color ml-auto  rounded-lg focus:outline-none hover:cursor-pointer"
              >
                <option className="h-4" value="desc">
                  Plus récent
                </option>
                <option className="p-4" value="asc">
                  Plus ancien
                </option>
              </select>
            </div>
          </section>
          <section className="max-w-sm mx-auto px-5 pt-3 grid gap-7 sm:grid-cols-2 sm:max-w-2xl lg:grid-cols-3 lg:max-w-5xl">
            {recepies &&
              !loading &&
              recepies.map((recepie, index) => (
                <Card recepies={recepie} type={`recipies`} key={index} />
              ))}
            {loading && (
              <div className="mx-auto w-fit col-span-full">
                <Image src={Loader} />
              </div>
            )}
            {recepies.length === 0 && !loading && (
              <div className="font-bold text-gray-400 text-center mt-10 col-span-full">
                Aucun resultats
              </div>
            )}
          </section>
        </>
        <div className="mx-auto w-fit my-10">
          {page > 1 && (
            <span
              className="border border-primary-color rounded-full p-3 text-primary-color hover:cursor-pointer"
              onClick={() => setPage(1)}
            >
              {1}
            </span>
          )}

          <span
            onClick={() => setPage((prev) => prev - 1)}
            className="p-5 hover:text-primary-color hover:cursor-pointer"
          >
            {page > 1 ? "<" : ""}
          </span>

          <span className="bg-primary-color rounded-full p-3 text-white">
            {page}
          </span>
          {page !== pages && (
            <span
              className="p-5 hover:text-primary-color hover:cursor-pointer"
              onClick={() => setPage((prev) => prev + 1)}
            >
              &gt;
            </span>
          )}
          {page !== pages && (
            <span
              className="border border-primary-color rounded-full p-3 text-primary-color hover:cursor-pointer"
              onClick={() => {
                if (recepiesCount) {
                  setPage(Math.ceil(recepiesCount / itemPerPage));
                }
              }}
            >
              {pages}
            </span>
          )}
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default Recettes;
